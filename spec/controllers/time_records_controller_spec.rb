require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe TimeRecordsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # TimeRecord. As you add validations to TimeRecord, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      date: Date.today,
      hours: 4,
      description: 'A new good record'
    }
  }

  let(:invalid_attributes) {
    {
      date: Date.today,
      hours: -4,
      description: 'A new bad record'
    }
  }

  before :each do
    @time_record = create :time_record
    @user = @time_record.user
  end

  describe "GET #index" do
    shared_examples "with authorization" do
      it "returns a success response" do
        get :index, params: { user_id: @user.id }

        expect(response).to be_successful
      end

      it "generates a list of time records grouped by date" do
        create_list :time_record, 2, user: @user, date: Date.today
        create_list :time_record, 2, user: @user, date: Date.yesterday

        get :index, params: { user_id: @user.id }

        expect(assigns(:dated_records)).to include(Date.today, Date.yesterday)
      end

      context "filters time records by date" do
        before :each do
          @past_records    = create_list :time_record, 2, user: @user, date: '2017-01-25'
          @present_records = create_list :time_record, 2, user: @user, date: '2018-01-25'
          @future_records  = create_list :time_record, 2, user: @user, date: '2019-01-25'
        end

        it "before requested date" do
          get :index, params: { user_id: @user.id, date_filter: { to: '2018-01-25' } }

          expect(assigns(:time_records)).to include(*@past_records, *@present_records).and exclude(*@future_records)
        end

        it "after requested date" do
          get :index, params: { user_id: @user.id, date_filter: { from: '2018-01-25' } }

          expect(assigns(:time_records)).to include(*@present_records, *@future_records).and exclude(*@past_records)
        end

        it "in requested date range" do
          get :index, params: { user_id: @user.id, date_filter: { from: '2018-01-01', to: '2019-01-01' } }

          expect(assigns(:time_records)).to include(*@present_records).and exclude(*@past_records, *@future_records)
        end
      end
    end

    context "as an admin" do
      login_admin

      include_examples "with authorization"
    end

    [:user, :manager].each do |role|
      context "as a #{role.to_s}" do
        before :each do
          @user.update_attribute :role, role
        end

        context "for themselves" do
          login_user(owner: true)

          include_examples "with authorization"
        end

        context "for other users" do
          login_user

          it "refuses to list their records" do
            bypass_rescue

            expect {
              get :index, params: { user_id: @user.to_param }
            }.to raise_error(CanCan::AccessDenied)
          end
        end
      end
    end
  end

  describe "GET #show" do
    shared_examples "with authorization" do
      it "returns a success response" do
        get :show, params: { id: @time_record.to_param, user_id: @user.to_param }

        expect(response).to be_successful
      end

      it "has a record to display" do
        get :show, params: { id: @time_record.to_param, user_id: @user.to_param }

        expect(assigns(:time_record)).to eq(@time_record)
      end
    end

    context "as an admin" do
      login_admin

      include_examples "with authorization"
    end

    [:user, :manager].each do |role|
      context "as a #{role.to_s}" do
        before :each do
          @user.update_attribute :role, role
        end

        context "for themselves" do
          login_user(owner: true)

          include_examples "with authorization"
        end

        context "for other users" do
          login_user

          it "refuses to show their records" do
            bypass_rescue

            expect {
              get :show, params: { id: @time_record.to_param, user_id: @user.to_param }
            }.to raise_error(CanCan::AccessDenied)
          end
        end
      end
    end
  end

  describe "GET #new" do
    shared_examples "with authorization" do
      it "returns a success response" do
        get :new, params: { user_id: @user.to_param }

        expect(response).to be_successful
      end

      it "sets today's date by default" do
        get :new, params: { user_id: @user.to_param }

        expect(assigns(:time_record).date).to eq(Date.today)
      end

      it "sets today's date if invalid date specified" do
        get :new, params: { user_id: @user.to_param, date: 'make-me-a-panda' }

        expect(assigns(:time_record).date).to eq(Date.today)
      end

      it "sets requested date if valid date specified" do
        get :new, params: { user_id: @user.to_param, date: '2017-11-23' }

        expect(assigns(:time_record).date).to eq(Date.parse '2017-11-23')
      end
    end

    context "as an admin" do
      login_admin

      include_examples "with authorization"
    end

    [:user, :manager].each do |role|
      context "as a #{role.to_s}" do
        before :each do
          @user.update_attribute :role, role
        end

        context "for themselves" do
          login_user(owner: true)

          include_examples "with authorization"
        end

        context "for other users" do
          login_user

          it "refuses to make a new record" do
            bypass_rescue

            expect {
              get :new, params: { time_record: valid_attributes, user_id: @user.to_param }
            }.to raise_error(CanCan::AccessDenied)
          end
        end
      end
    end
  end

  describe "GET #edit" do
    shared_examples "with authorization" do
      it "returns a success response" do
        get :edit, params: { id: @time_record.to_param, user_id: @user.to_param }

        expect(response).to be_successful
      end

      it "has a record to edit" do
        get :edit, params: { id: @time_record.to_param, user_id: @user.to_param }

        expect(assigns(:time_record)).to eq(@time_record)
      end
    end

    context "as an admin" do
      login_admin

      include_examples "with authorization"
    end

    [:user, :manager].each do |role|
      context "as a #{role.to_s}" do
        before :each do
          @user.update_attribute :role, role
        end

        context "for themselves" do
          login_user(owner: true)

          include_examples "with authorization"
        end

        context "for other users" do
          login_user

          it "refuses to edit their records" do
            bypass_rescue

            expect {
              get :edit, params: { id: @time_record.to_param, user_id: @user.to_param }
            }.to raise_error(CanCan::AccessDenied)
          end
        end
      end
    end
  end

  describe "POST #create" do
    shared_examples "with authorization" do
      it "creates a new TimeRecord" do
        expect {
          post :create, params: { time_record: valid_attributes, user_id: @user.to_param }
        }.to change(TimeRecord, :count).by(1)
      end

      it "redirects to the created time_record" do
        post :create, params: { time_record: valid_attributes, user_id: @user.to_param }

        expect(response).to redirect_to([@user, TimeRecord.last])
      end
    end

    context "with valid params" do
      context "as an admin" do
        login_admin

        include_examples "with authorization"
      end

      [:user, :manager].each do |role|
        context "as a #{role.to_s}" do
          before :each do
            @user.update_attribute :role, role
          end

          context "for themselves" do
            login_user(owner: true)

            include_examples "with authorization"
          end

          context "for other users" do
            login_user

            it "refuses to create a new record" do
              bypass_rescue

              expect {
                post :create, params: { time_record: valid_attributes, user_id: @user.to_param }
              }.to raise_error(CanCan::AccessDenied).and avoid_changing(TimeRecord, :count)
            end
          end
        end
      end
    end

    context "with invalid params" do
      login_admin

      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { time_record: invalid_attributes, user_id: @user.to_param }

        expect(response).to be_successful
      end

      it "has errors to display" do
        post :create, params: { time_record: invalid_attributes, user_id: @user.to_param }

        expect(assigns(:time_record).errors.count).to be > 0
      end
    end
  end

  describe "PUT #update" do
    shared_examples "with authorization" do
      it "updates the requested time_record" do
        put :update, params: { id: @time_record.to_param,
          time_record: valid_attributes, user_id: @user.to_param }

        @time_record.reload
        expect(@time_record.date).to eq(Date.today)
        expect(@time_record.hours).to eq(4)
        expect(@time_record.description).to eq('A new good record')
      end

      it "redirects to the time_record" do
        put :update, params: { id: @time_record.to_param,
          time_record: valid_attributes, user_id: @user.to_param }

        expect(response).to redirect_to([@user, @time_record])
      end
    end

    context "with valid params" do
      context "as an admin" do
        login_admin

        include_examples "with authorization"
      end

      [:user, :manager].each do |role|
        context "as a #{role.to_s}" do
          before :each do
            @user.update_attribute :role, role
          end

          context "for themselves" do
            login_user(owner: true)

            include_examples "with authorization"
          end

          context "for other users" do
            login_user

            it "refuses to update their records" do
              bypass_rescue

              expect {
                put :update, params: { id: @time_record.to_param,
                  time_record: valid_attributes, user_id: @user.to_param }
              }.to raise_error(CanCan::AccessDenied).and avoid_changing(@time_record, :attributes)
            end
          end
        end
      end
    end

    context "with invalid params" do
      login_admin

      it "returns a success response (i.e. to display the 'edit' template)" do
        put :update, params: { id: @time_record.to_param, time_record: invalid_attributes, user_id: @user.to_param }

        expect(response).to be_successful
      end

      it "has errors to display" do
        put :update, params: { id: @time_record.to_param, time_record: invalid_attributes, user_id: @user.to_param }

        expect(assigns(:time_record).errors.count).to be > 0
      end
    end
  end

  describe "DELETE #destroy" do
    shared_examples "with authorization" do
      it "destroys the requested time_record" do
        expect {
          delete :destroy, params: {id: @time_record.to_param, user_id: @user.to_param}
        }.to change(TimeRecord, :count).by(-1)
      end

      it "redirects to the time_records list" do
        delete :destroy, params: {id: @time_record.to_param, user_id: @user.to_param}

        expect(response).to redirect_to(user_time_records_url(@user))
      end
    end

    context "as an admin" do
      login_admin

      include_examples "with authorization"
    end

    [:user, :manager].each do |role|
      context "as a #{role.to_s}" do
        before :each do
          @user.update_attribute :role, role
        end

        context "for themselves" do
          login_user(owner: true)

          include_examples "with authorization"
        end

        context "for other users" do
          login_user

          it "refuses to delete their records" do
            bypass_rescue

            expect {
              delete :destroy, params: {id: @time_record.to_param, user_id: @user.to_param}
            }.to raise_error(CanCan::AccessDenied).and avoid_changing(TimeRecord, :count)
          end
        end
      end
    end
  end
end
