require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ProfilesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Profile. As you add validations to Profile, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      full_name: 'Good Panda',
      expected_hours: 9
    }
  }

  let(:invalid_attributes) {
    {
      full_name: 'Bad Panda',
      expected_hours: -9
    }
  }

  before :each do
    @user = create :user
    @profile = @user.profile
  end

  describe "GET #show" do
    it "returns a success response" do
      get :show, params: {user_id: @user.to_param}

      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    shared_examples "with authorization" do
      it "returns a success response" do
        get :edit, params: {user_id: @user.to_param}

        expect(response).to be_successful
      end

      it "has a profile to edit" do
        get :edit, params: {user_id: @user.to_param}

        expect(assigns(:profile)).to eq(@profile)
      end
    end

    context "as an admin" do
      login_admin

      include_examples "with authorization"
    end

    context "as a manager" do
      login_manager

      include_examples "with authorization"
    end

    context "as a regular user" do
      context "with another user's profile" do
        login_user

        it "refuses to edit the requested profile" do
          expect {
            get :edit, params: {user_id: @user.to_param}
          }.to raise_error(CanCan::AccessDenied)
        end
      end

      context "with their own profile" do
        login_user(owner: true)

        include_examples "with authorization"
      end
    end
  end

  describe "PUT #update" do
    shared_examples "with authorization" do
      it "updates the requested profile" do
        put :update, params: {user_id: @user.to_param, profile: valid_attributes}
        @profile.reload

        expect(@profile.full_name).to eq(valid_attributes[:full_name])
        expect(@profile.expected_hours).to eq(valid_attributes[:expected_hours])
      end

      it "redirects to the profile" do
        put :update, params: {user_id: @user.to_param, profile: valid_attributes}

        expect(response).to redirect_to(user_profile_path(user_id: @user.id))
      end
    end

    context "with valid params" do
      context "as an admin" do
        login_admin

        include_examples "with authorization"
      end

      context "as a manager" do
        login_manager

        include_examples "with authorization"
      end

      context "as a regular user" do
        context "with their own profile" do
          login_user(owner: true)

          include_examples "with authorization"
        end

        context "with another user's profile" do
          login_user

          it "refuses to update the requested profile" do
            expect {
              put :update, params: {user_id: @user.to_param, profile: valid_attributes}
            }.to raise_error(CanCan::AccessDenied)
          end
        end
      end
    end

    context "with invalid params" do
      login_admin

      it "displays the 'edit' template again" do
        put :update, params: {user_id: @user.to_param, profile: invalid_attributes}

        expect(response).to render_template(:edit)
      end

      it "has errors to display" do
        put :update, params: {user_id: @user.to_param, profile: invalid_attributes}

        expect(assigns(:profile).errors.count).to be > 0
      end
    end
  end
end
