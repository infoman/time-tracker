# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do
  it { should use_before_action(:authenticate_user!) }

  before :each do
    @user = create :user
  end

  describe "GET #index" do
    shared_examples "with full access" do
      it "returns a success response" do
        get :index, params: {}

        expect(response).to be_successful
      end

      it "generates a list of users" do
        create_list :user, 9

        get :index, params: {}

        expect(assigns(:users).count).to be >= 10
        expect(assigns(:users)).to include(@user)
      end
    end

    shared_examples "with restricted access" do
      it "make only own user visible" do
        create_list :user, 9

        get :index, params: {}

        expect(assigns(:users)).to eq([@user])
      end
    end

    context "as an admin" do
      login_admin(owner: true)

      include_examples "with full access"
    end

    context "as a manager" do
      login_manager(owner: true)

      include_examples "with full access"
    end

    context "as a regular user" do
      login_user(owner: true)

      include_examples "with restricted access"
    end
  end

  describe "GET #show" do
    shared_examples "with authorization" do
      it "returns a success response" do
        get :show, params: {id: @user.to_param}

        expect(response).to be_successful
      end

      it "has a user to display" do
        get :show, params: {id: @user.to_param}

        expect(assigns(:user)).to eq(@user)
      end
    end

    shared_examples "unauthorized" do
      it "refuses to show user" do
        bypass_rescue

        expect {
          get :show, params: {id: @user.to_param}
        }.to raise_error(CanCan::AccessDenied)
      end
    end

    context "as an admin" do
      login_admin

      include_examples "with authorization"
    end

    context "as a manager" do
      login_manager

      include_examples "with authorization"
    end

    context "as a regular user" do
      context "with their own account" do
        login_user(owner: true)

        include_examples "with authorization"
      end

      context "with another user's account" do
        login_user

        include_examples "unauthorized"
      end
    end
  end

  describe "PATCH #set_role" do
    shared_examples "with authorization" do
      it "updates role of the selected user" do
        expect {
          patch :set_role, params: { id: @user.to_param, user: { role: :manager } }

          @user.reload
        }.to change(@user, :role).to('manager')
      end

      it "redirects back to the users list" do
        patch :set_role, params: { id: @user.to_param, user: { role: :manager } }

        expect(response).to redirect_to :users
      end

      it "refuses to demote themselves" do
        expect {
          patch :set_role, params: { id: subject.current_user.to_param, user: { role: :manager } }
        }.to avoid_changing(subject.current_user, :role)
      end
    end

    shared_examples "unauthorized" do
      it "refuses to change role" do
        expect {
          patch :set_role, params: { id: @user.to_param, user: { role: :admin } }
        }.to avoid_changing(@user, :role)
      end
    end

    context "as an admin" do
      login_admin

      include_examples "with authorization"
    end

    context "as a manager" do
      login_manager(owner: true)

      include_examples "unauthorized"
    end

    context "as a regular user" do
      login_user(owner: true)

      include_examples "unauthorized"
    end
  end

  describe "DELETE #destroy" do
    shared_examples "with authorization" do
      it "destroys the requested user" do
        expect {
          delete :destroy, params: {id: @user.to_param}
        }.to change(User, :count).by(-1)
      end

      it "redirects to the users list" do
        delete :destroy, params: {id: @user.to_param}

        expect(response).to redirect_to(users_url)
      end
    end

    shared_examples "unauthorized" do
      it "refuses to destroy the requested user" do
        bypass_rescue

        expect {
          delete :destroy, params: {id: @user.to_param}
        }.to raise_error(CanCan::AccessDenied).and avoid_changing(User, :count)
      end
    end

    describe "as an admin" do
      login_admin

      include_examples "with authorization"
    end

    describe "as a manager" do
      login_manager

      include_examples "with authorization"
    end

    describe "as a regular user" do
      login_user

      include_examples "unauthorized"
    end
  end
end
