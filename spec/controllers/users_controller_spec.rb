require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do
  before :each do
    @user = create :user
  end

  describe "GET #index" do
    it "returns a success response" do
      get :index, params: {}

      expect(response).to be_successful
    end

    [:admin, :manager].each do |role|
      context "as #{role}" do
        before :each do
          @user.update_attribute :role, role
        end

        login_user(owner: true)

        it "generates a list of users" do
          create_list :user, 9

          get :index, params: {}

          expect(assigns(:users).count).to be >= 10
          expect(assigns(:users)).to include(@user)
        end
      end
    end

    context "as a regular user" do
      login_user(owner: true)

      it "make only own user visible" do
        create_list :user, 9

        get :index, params: {}

        expect(assigns(:users)).to eq([@user])
      end
    end
  end

  describe "GET #show" do
    shared_examples "with authorization" do
      it "returns a success response" do
        get :show, params: {id: @user.to_param}

        expect(response).to be_successful
      end

      it "has a user to display" do
        get :show, params: {id: @user.to_param}

        expect(assigns(:user)).to eq(@user)
      end
    end

    context "as an admin" do
      login_admin

      include_examples "with authorization"
    end

    context "as a manager" do
      login_manager

      include_examples "with authorization"
    end

    context "as a regular user" do
      context "with their own account" do
        login_user(owner: true)

        include_examples "with authorization"
      end

      context "with another user's account" do
        login_user

        it "refuses to show user" do
          expect {
            get :show, params: {id: @user.to_param}
          }.to raise_error(CanCan::AccessDenied)
        end
      end
    end
  end

  describe "DELETE #destroy" do
    shared_examples "with authorization" do
      it "destroys the requested user" do
        expect {
          delete :destroy, params: {id: @user.to_param}
        }.to change(User, :count).by(-1)
      end

      it "redirects to the users list" do
        delete :destroy, params: {id: @user.to_param}

        expect(response).to redirect_to(users_url)
      end
    end

    describe "as an admin" do
      login_admin

      include_examples "with authorization"
    end

    describe "as a manager" do
      login_manager

      include_examples "with authorization"
    end

    describe "as a regular user" do
      login_user

      it "refuses to destroy the requested user" do
        expect {
          delete :destroy, params: {id: @user.to_param}
        }.to raise_error(CanCan::AccessDenied).and avoid_changing(User, :count)
      end
    end
  end
end
